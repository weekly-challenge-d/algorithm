#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    // N x M 격자에서 K개 선택
    int N, M, K;
    cin >> N >> M >> K;

    // 값을 저장할 격자판 (2차원 벡터) 생성
    vector<vector<int>> grid(N, vector<int>(M));

    // 격자판에 값 입력
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            cin >> grid[i][j];
        }
    }

    int maxSum = 0; // 최대 합 저장

    
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) { // 가능한 모든 조합 완전 탐색
            
            for (int p = 0; p < N; ++p) { 
                for (int q = 0; q < M; ++q) { // 현재 칸부터 하나씩 탐색
                    

                    // 현재 칸과 같은 칸 or 상하좌우(인접) -> 불가능한 칸은 모두 제외
                    if ((i == p && j == q) || abs(i - p) + abs(j - q) == 1) continue;

                    
                    // 2개 이상 선택해야하면 두 번째 선택한 칸부터는 첫 번째 칸의 오른쪽이나 아래에 있어야 함
                    if (K > 1 && (p < i || (p == i && q <= j))) continue;

                    // 3개 이상 선택해야하면 나머지 위치 고려해야함
                    if (K > 2) {
                        for (int x = max(0, i - 1); x <= min(N - 1, i + 1); ++x) {
                            for (int y = max(0, j - 1); y <= min(M - 1, j + 1); ++y) {
                                // 선택한 칸들의 좌표가 같지 않고 인접하지 않아야 함
                                if (x != i && y != j && x != p && y != q && x != i + 1 && y != j && x != i + 1 && y != j + 1 && x < N && y < M && (abs(x - i) + abs(y - j) != 1) && (abs(x - p) + abs(y - q) != 1)) {
                                int sum = grid[i][j] + grid[p][q] + grid[i + 1][j] + grid[i + 1][j + 1] + grid[x][y];
                                    maxSum = max(maxSum, sum); 
                                }
                            }
                        }
                    }
                    // 선택한 칸의 수가 2개면 두 칸의 조합만 고려
                    else {
                        int sum = grid[i][j] + grid[p][q];
                        maxSum = max(maxSum, sum);
                    }
                }
            }
        }
    }

    // 최댓값 출력
    cout << maxSum << endl;
    return 0;
}
